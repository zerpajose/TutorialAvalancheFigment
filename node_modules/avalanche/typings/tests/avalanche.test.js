"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_mock_axios_1 = __importDefault(require("jest-mock-axios"));
const src_1 = require("src");
const api_1 = require("src/apis/avm/api");
const api_2 = require("src/apis/admin/api");
const api_3 = require("src/apis/health/api");
const api_4 = require("src/apis/info/api");
const api_5 = require("src/apis/keystore/api");
const api_6 = require("src/apis/metrics/api");
const api_7 = require("src/apis/platformvm/api");
const testlib_1 = require("./testlib");
describe('Avalanche', () => {
    const blockchainid = "6h2s5de1VC65meajE1L2PjvZ1MXvHc3F6eqPCGKuDt4MxiweF";
    const ip = '127.0.0.1';
    const port = 9650;
    const protocol = "https";
    let avalanche;
    beforeAll(() => {
        avalanche = new src_1.Avalanche(ip, port, protocol, 12345, undefined, undefined, undefined, true);
        avalanche.addAPI("admin", api_2.AdminAPI);
        avalanche.addAPI("xchain", api_1.AVMAPI, "/ext/subnet/avm", blockchainid);
        avalanche.addAPI("health", api_3.HealthAPI);
        avalanche.addAPI("info", api_4.InfoAPI);
        avalanche.addAPI("keystore", api_5.KeystoreAPI);
        avalanche.addAPI("metrics", api_6.MetricsAPI);
        avalanche.addAPI("pchain", api_7.PlatformVMAPI);
    });
    test('Can initialize without port', () => {
        const a = new src_1.Avalanche(ip, undefined, protocol, 12345);
        expect(a.getPort()).toBe(undefined);
        expect(a.getURL()).toBe(`${protocol}://${ip}`);
    });
    test('Can initialize with port', () => {
        expect(avalanche.getIP()).toBe(ip);
        expect(avalanche.getPort()).toBe(port);
        expect(avalanche.getProtocol()).toBe(protocol);
        expect(avalanche.getURL()).toBe(`${protocol}://${ip}:${port}`);
        expect(avalanche.getNetworkID()).toBe(12345);
        expect(avalanche.getHeaders()).toStrictEqual({});
        avalanche.setNetworkID(50);
        expect(avalanche.getNetworkID()).toBe(50);
        avalanche.setNetworkID(12345);
        expect(avalanche.getNetworkID()).toBe(12345);
    });
    test('Endpoints correct', () => {
        expect(avalanche.Admin()).not.toBeInstanceOf(api_1.AVMAPI);
        expect(avalanche.Admin()).toBeInstanceOf(api_2.AdminAPI);
        expect(avalanche.XChain()).not.toBeInstanceOf(api_2.AdminAPI);
        expect(avalanche.XChain()).toBeInstanceOf(api_1.AVMAPI);
        expect(avalanche.Health()).not.toBeInstanceOf(api_5.KeystoreAPI);
        expect(avalanche.Health()).toBeInstanceOf(api_3.HealthAPI);
        expect(avalanche.Info()).not.toBeInstanceOf(api_5.KeystoreAPI);
        expect(avalanche.Info()).toBeInstanceOf(api_4.InfoAPI);
        expect(avalanche.PChain()).not.toBeInstanceOf(api_5.KeystoreAPI);
        expect(avalanche.PChain()).toBeInstanceOf(api_7.PlatformVMAPI);
        expect(avalanche.NodeKeys()).not.toBeInstanceOf(api_7.PlatformVMAPI);
        expect(avalanche.NodeKeys()).toBeInstanceOf(api_5.KeystoreAPI);
        expect(avalanche.Metrics()).not.toBeInstanceOf(api_5.KeystoreAPI);
        expect(avalanche.Metrics()).toBeInstanceOf(api_6.MetricsAPI);
        expect(avalanche.Admin().getRPCID()).toBe(1);
        expect(avalanche.XChain().getRPCID()).toBe(1);
        expect(avalanche.PChain().getRPCID()).toBe(1);
        expect(avalanche.NodeKeys().getRPCID()).toBe(1);
    });
    test('Create new API', () => {
        avalanche.addAPI("avm2", api_1.AVMAPI);
        expect(avalanche.api("avm2")).toBeInstanceOf(api_1.AVMAPI);
        avalanche.addAPI("keystore2", api_5.KeystoreAPI, "/ext/keystore2");
        expect(avalanche.api("keystore2")).toBeInstanceOf(api_5.KeystoreAPI);
        avalanche.api("keystore2").setBaseURL("/ext/keystore3");
        expect(avalanche.api("keystore2").getBaseURL()).toBe("/ext/keystore3");
        expect(avalanche.api("keystore2").getDB()).toHaveProperty("namespace");
    });
    test("Customize headers", () => {
        avalanche.setHeader("X-Custom-Header", "example");
        expect(avalanche.getHeaders()).toStrictEqual({
            "X-Custom-Header": "example"
        });
    });
});
describe('HTTP Operations', () => {
    const ip = '127.0.0.1';
    const port = 8080;
    const protocol = 'http';
    const path = '/ext/testingrequests';
    let avalanche;
    beforeAll(() => {
        avalanche = new src_1.Avalanche(ip, port, protocol, 12345, undefined, undefined, undefined, true);
        avalanche.addAPI('testingrequests', testlib_1.TestAPI, path);
    });
    afterEach(() => {
        jest_mock_axios_1.default.reset();
    });
    test('GET works', () => __awaiter(void 0, void 0, void 0, function* () {
        const input = 'TestGET';
        const api = avalanche.api('testingrequests');
        const result = api.TestGET(input, `/${input}`);
        const payload = {
            result: {
                output: input,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response.output).toBe(input);
    }));
    test('DELETE works', () => __awaiter(void 0, void 0, void 0, function* () {
        const input = 'TestDELETE';
        const api = avalanche.api('testingrequests');
        const axiosConfig = {
            baseURL: `${protocol}://${ip}:${port}`,
            responseType: 'text',
        };
        const result = api.TestDELETE(input, `/${input}`, axiosConfig);
        const payload = {
            result: {
                output: input,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response.output).toBe(input);
    }));
    test('POST works', () => __awaiter(void 0, void 0, void 0, function* () {
        const input = 'TestPOST';
        const api = avalanche.api('testingrequests');
        const result = api.TestPOST(input, `/${input}`);
        const payload = {
            result: {
                output: input,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response.output).toBe(input);
    }));
    test('PUT works', () => __awaiter(void 0, void 0, void 0, function* () {
        const input = 'TestPUT';
        const api = avalanche.api('testingrequests');
        const result = api.TestPUT(input, `/${input}`);
        const payload = {
            result: {
                output: input,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response.output).toBe(input);
    }));
    test('PATCH works', () => __awaiter(void 0, void 0, void 0, function* () {
        const input = 'TestPATCH';
        const api = avalanche.api('testingrequests');
        const result = api.TestPATCH(input, `/${input}`);
        const payload = {
            result: {
                output: input,
            },
        };
        const responseObj = {
            data: payload,
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const response = yield result;
        expect(jest_mock_axios_1.default.request).toHaveBeenCalledTimes(1);
        expect(response.output).toBe(input);
    }));
});
//# sourceMappingURL=data:application/json;base64,